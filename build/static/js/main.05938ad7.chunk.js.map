{"version":3,"sources":["logo.svg","assets/logo.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","getColorSwatchBase64String","canvas","document","createElement","context","getContext","width","height","imgData","getImageData","fillStyle","fillRect","putImageData","toDataURL","App","className","style","display","flexDirection","padding","src","logo","id","alt","onClick","a","Promise","resolve","image","Image","customlogo","onload","drawImage","url","importUrl","getElementById","crossOrigin","console","log","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,kC,yNCkF3C,SAASC,IAeP,IACMC,EAASC,SAASC,cAAc,UAChCC,EAAUH,EAAOI,WAAW,MAClCJ,EAAOK,MAAQ,IACfL,EAAOM,OAAS,IAChB,IAAMC,EAAUJ,EAAQK,aAAa,EAAG,EAAG,GAAI,IAI/C,OAHAL,EAAQM,UAAY,MACpBN,EAAQO,SAAS,GAAI,GAAI,GAAI,IAC7BP,EAAQQ,aAAaJ,EAAS,EAAG,GAC1BP,EAAOY,YAEDC,MAvGf,WAEE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,MAAO,CAACC,QAAS,SACpB,6BAASD,MAAO,CAACC,QAAS,OAAQC,cAAe,SAAUC,QAAS,SAClE,yBAAKC,IAAKC,IAAMC,GAAG,aAAaP,UAAU,WAAWQ,IAAI,SACzD,4BAAQC,QAAO,sBAAE,4BAAAC,EAAA,sEAgCpB,IAAIC,SAAQ,SAAAC,GACjB,IAAMC,EAAQ,IAAIC,MAClBD,EAAMR,IAAMU,IAEZ,IAAM7B,EAASC,SAASC,cAAc,UAChCC,EAAUH,EAAOI,WAAW,MAElCJ,EAAOK,MAAQsB,EAAMtB,MACrBL,EAAOM,OAASqB,EAAMrB,OACtBqB,EAAMG,OAAS,WACb3B,EAAQ4B,UAAUJ,EAAO,EAAG,GAC5B,IAAMK,EAAMhC,EAAOY,UAAU,aAC7Bc,EAAQM,OA5Ce,OACTC,EADS,OAEfhC,SAASiC,eAAe,cAAcf,IAAMc,EAF7B,4CAAjB,kBAOF,6BAASlB,MAAO,CAACC,QAAS,OAAQC,cAAe,SAAUC,QAAS,SAClE,yBAAKC,IAAKC,IAAMC,GAAG,WAAWP,UAAU,WAAWQ,IAAI,SACvD,4BAAQC,QAAO,sBAAE,4BAAAC,EAAA,sEA0CpB,IAAIC,SAAQ,SAAAC,GACjB,IAAMC,EAAQ,IAAIC,MAClBD,EAAMQ,YAAc,YACpBR,EAAMR,IAAM,sDAEZ,IAAMnB,EAASC,SAASC,cAAc,UAChCC,EAAUH,EAAOI,WAAW,MAElCJ,EAAOK,MAAQsB,EAAMtB,MACrBL,EAAOM,OAASqB,EAAMrB,OACtBqB,EAAMG,OAAS,WACb3B,EAAQ4B,UAAUJ,EAAO,EAAG,GAC5B,IAAMK,EAAMhC,EAAOY,UAAU,aAC7Bc,EAAQM,OAvDe,OACTA,EADS,OAEf/B,SAASiC,eAAe,YAAYf,IAAMa,EAF3B,4CAAjB,eAMF,6BAASjB,MAAO,CAACC,QAAS,OAAQC,cAAe,SAAUC,QAAS,SAClE,yBAAKC,IAAKC,IAAMC,GAAG,cAAcP,UAAU,WAAWQ,IAAI,SAC1D,4BAAQC,QAAO,sBAAE,4BAAAC,EAAA,sDACTQ,EAAOjC,IACbqC,QAAQC,IAAIL,GACZ/B,SAASiC,eAAe,eAAef,IAAMa,EAH9B,4CAAjB,6BClBQM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3C,SAASiC,eAAe,SD2H3C,kBAAmBW,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.05938ad7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.d054890a.jpg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport customlogo from './assets/logo.jpg';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={{display: 'flex'}}>\n          <section style={{display: 'flex', flexDirection: 'column', padding: '10px'}}>\n            <img src={logo} id=\"logo-local\" className=\"App-logo\" alt=\"logo\" />\n            <button onClick={async () => {\n              const importUrl = await getBase64LocaImport();\n              document.getElementById(\"logo-local\").src = importUrl;\n\n            }}>local import </button>\n          </section>\n\n          <section style={{display: 'flex', flexDirection: 'column', padding: '10px'}}>\n            <img src={logo} id=\"logo-url\" className=\"App-logo\" alt=\"logo\" />\n            <button onClick={async () => {\n              const url = await getBase64UrlImport();\n              document.getElementById(\"logo-url\").src = url;            \n            }}>url fetch </button>\n          </section>\n\n          <section style={{display: 'flex', flexDirection: 'column', padding: '10px'}}>\n            <img src={logo} id=\"logo-swatch\" className=\"App-logo\" alt=\"logo\" />\n            <button onClick={async  () => {\n              const url =  getColorSwatchBase64String();\n              console.log(url);\n              document.getElementById(\"logo-swatch\").src = url;\n            }}>canvas color swatch </button>\n          </section>\n        </div>\n    </header>\n    </div>\n  );\n}\n\n\n\nfunction getBase64LocaImport() {\n  return new Promise(resolve => {\n    const image = new Image();\n    image.src = customlogo;\n\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n\n    canvas.width = image.width;\n    canvas.height = image.height;\n    image.onload = () => {\n      context.drawImage(image, 0, 0);\n      const url = canvas.toDataURL('image/png');\n      resolve(url);\n    };\n\n  });\n}\n\nfunction getBase64UrlImport() {\n  return new Promise(resolve => {\n    const image = new Image();\n    image.crossOrigin = \"Anonymous\";\n    image.src = 'https://avatars3.githubusercontent.com/u/933192?v=4';\n\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n\n    canvas.width = image.width;\n    canvas.height = image.height;\n    image.onload = () => {\n      context.drawImage(image, 0, 0);\n      const url = canvas.toDataURL('image/png');\n      resolve(url);\n    };\n  });\n}\n\nfunction getColorSwatchBase64String() {\n  function borderPixels(pixelIndex, width, height) {\n    for (let i = 1; i <= 9; i += 1) {\n      if (pixelIndex === (width * 4 * i)) {\n        return true;\n      } else if (pixelIndex === ((width * 4 * i) - 4)) {\n        return true;\n      }\n    }\n    if ((pixelIndex < width * 4) || (pixelIndex >= ((width * height * 4) - (width * 4)))) {\n      return true;\n    }\n    return false;\n  }\n  \n  const colorArray = [255, 0, 0, 1];\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  canvas.width = 100;\n  canvas.height = 100;\n  const imgData = context.getImageData(0, 0, 50, 50);\n  context.fillStyle = \"red\";\n  context.fillRect(10, 10, 50, 50);\n  context.putImageData(imgData, 0, 0);\n  return canvas.toDataURL();\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}